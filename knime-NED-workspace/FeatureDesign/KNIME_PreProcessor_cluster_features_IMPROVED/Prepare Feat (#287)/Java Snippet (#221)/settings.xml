<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="scriptImports" type="xstring" value="// Your custom imports:%%00010%%00010"/>
<entry key="scriptFields" type="xstring" value="// Your custom variables:%%00010static int BIN_SIZE = 10*60; //10 minutes%%00010%%00010private String getExceptionError(Exception e)%%00010{%%00010%%00009String msg = e.toString() + &quot; : &quot; ;%%00010%%00010%%00009for (int i=0; i&lt;e.getStackTrace().length; i++)%%00010%%00009{%%00010%%00009%%00009msg += e.getStackTrace()[i].toString() + &quot;\n&quot;;%%00010%%00009}%%00010%%00010%%00009return msg;%%00010}%%00010%%00010%%00010private Integer[] prepareBins(Long[] times)%%00010{%%00010%%00009int numberOfBins = 3600/BIN_SIZE;%%00010%%00009%%00010%%00009Integer[] bins = new Integer[numberOfBins];%%00010%%00010%%00009for (int i=0; i&lt;bins.length; i++)%%00010%%00009%%00009bins[i] = 0;%%00010%%00009%%00010%%00009for (int i =0; i&lt;times.length; i++)%%00010%%00009{%%00010%%00009%%00009int bt = (int)( times[i] / BIN_SIZE );%%00010%%00010%%00009%%00009if(bt &gt;= bins.length)%%00010%%00009%%00009%%00009break;%%00010%%00009%%00009%%00010%%00009%%00009bins[bt] ++;%%00010%%00009}%%00010%%00010%%00009return bins;%%00010}%%00010%%00010private Long[] parseValues(String values)%%00010{%%00010%%00009String arraystr = values.substring(1, values.length()-1);%%00010%%00009String[] valuesArray = arraystr.split(&quot;,&quot;);%%00010%%00009%%00010%%00009Long[] parsed = new Long[valuesArray.length];%%00010%%00009%%00010%%00009for(int i=0; i&lt;valuesArray.length; i++)%%00010%%00009{%%00010%%00009%%00009parsed[i] = Long.parseLong( valuesArray[i].trim() ) ;%%00010%%00009}%%00010%%00010%%00009return parsed;%%00010}%%00010%%00010private Double[] integral(Number[] yvalues)%%00010{%%00010%%00009Double[] intg = new Double[yvalues.length-1];%%00010%%00009%%00010%%00009for(int i=0; i&lt;yvalues.length-1; i++)%%00010%%00009{%%00010%%00009%%00009intg[i] = ( yvalues[i+1].doubleValue() - yvalues[i].doubleValue() ) ;%%00010%%00009}%%00010%%00010%%00009return intg;%%00010}%%00010"/>
<entry key="scriptBody" type="xstring" value="// Enter your code here:%%00010%%00009try {%%00010%%00009%%00010%%00009%%00009Long[] parsed = parseValues(c_times);%%00010%%00009%%00009%%00010%%00009%%00009long debug = 0;%%00010%%00010%%00009%%00009out_debug_age = parsed[parsed.length-1] - parsed[0];%%00010%%00010%%00009%%00009Integer[] bins = prepareBins(parsed);%%00010%%00009%%00009out_bins = bins;%%00010%%00010%%00009%%00009%%00010%%00009%%00009for(int i=0; i&lt;parsed.length-1; i++)%%00010%%00009%%00009{%%00010%%00009%%00009%%00009if (parsed[i+1] &lt; parsed[i]) //verificaition only%%00010%%00009%%00009%%00009%%00009debug = debug / 0; //fail!%%00010%%00009%%00009}%%00010%%00010%%00009%%00009out_bins_norm = new Double[bins.length];%%00010%%00009%%00009out_debug_sum_bins = bins[bins.length-1]; //convert to Long%%00010%%00009%%00009for(int i=0; i&lt;bins.length; i++)%%00010%%00009%%00009{%%00010%%00009%%00009%%00009out_bins_norm[i] = 100.0 * out_bins[i] / c_Lastsize;%%00009//percent%%00010%%00009%%00009%%00009out_debug_sum_bins += out_bins[i];%%00010%%00009%%00009}%%00010%%00009%%00009%%00010%%00009%%00009out_integral = integral(bins);%%00010%%00009%%00009%%00010%%00009%%00009out_integral2 = integral(out_integral);%%00010%%00010%%00009} catch (Exception e) {%%00010%%00009%%00009out_debug_error = getExceptionError(e);%%00010%%00009} %%00010 %%00010%%00010%%00010%%00010%%00010%%00010%%00010%%00010%%00010%%00010"/>
<config key="jarFiles">
<entry key="array-size" type="xint" value="0"/>
</config>
<config key="outCols">
<entry key="array-size" type="xint" value="7"/>
<config key="0">
<entry key="Name" type="xstring" value="integral"/>
<entry key="JavaName" type="xstring" value="out_integral"/>
<entry key="JavaType" type="xstring" value="[Ljava.lang.Double;"/>
<config key="Type">
<config key="collection_element_type">
<entry key="cell_class" type="xstring" value="org.knime.core.data.def.DoubleCell"/>
</config>
<entry key="cell_class" type="xstring" value="org.knime.core.data.collection.ListCell"/>
<entry key="is_null" type="xboolean" value="false"/>
</config>
<entry key="ConverterFactory" type="xstring" value="org.knime.core.data.convert.datacell.ArrayToCollectionConverterFactory(org.knime.core.data.def.DoubleCell$DoubleCellFactory.create(class java.lang.Double))"/>
<entry key="replaceExisting" type="xboolean" value="false"/>
</config>
<config key="1">
<entry key="Name" type="xstring" value="debug_error"/>
<entry key="JavaName" type="xstring" value="out_debug_error"/>
<entry key="JavaType" type="xstring" value="java.lang.String"/>
<config key="Type">
<entry key="cell_class" type="xstring" value="org.knime.core.data.def.StringCell"/>
<entry key="is_null" type="xboolean" value="false"/>
</config>
<entry key="ConverterFactory" type="xstring" value="org.knime.core.data.def.StringCell$StringCellFactory.createCell(class java.lang.String)"/>
<entry key="replaceExisting" type="xboolean" value="false"/>
</config>
<config key="2">
<entry key="Name" type="xstring" value="bins"/>
<entry key="JavaName" type="xstring" value="out_bins"/>
<entry key="JavaType" type="xstring" value="[Ljava.lang.Integer;"/>
<config key="Type">
<config key="collection_element_type">
<entry key="cell_class" type="xstring" value="org.knime.core.data.def.IntCell"/>
</config>
<entry key="cell_class" type="xstring" value="org.knime.core.data.collection.ListCell"/>
<entry key="is_null" type="xboolean" value="false"/>
</config>
<entry key="ConverterFactory" type="xstring" value="org.knime.core.data.convert.datacell.ArrayToCollectionConverterFactory(org.knime.core.data.def.IntCell$IntCellFactory.create(class java.lang.Integer))"/>
<entry key="replaceExisting" type="xboolean" value="false"/>
</config>
<config key="3">
<entry key="Name" type="xstring" value="debug_age"/>
<entry key="JavaName" type="xstring" value="out_debug_age"/>
<entry key="JavaType" type="xstring" value="java.lang.Long"/>
<config key="Type">
<entry key="cell_class" type="xstring" value="org.knime.core.data.def.LongCell"/>
<entry key="is_null" type="xboolean" value="false"/>
</config>
<entry key="ConverterFactory" type="xstring" value="org.knime.core.data.def.LongCell$LongCellFactory.create(class java.lang.Long)"/>
<entry key="replaceExisting" type="xboolean" value="false"/>
</config>
<config key="4">
<entry key="Name" type="xstring" value="integral2"/>
<entry key="JavaName" type="xstring" value="out_integral2"/>
<entry key="JavaType" type="xstring" value="[Ljava.lang.Double;"/>
<config key="Type">
<config key="collection_element_type">
<entry key="cell_class" type="xstring" value="org.knime.core.data.def.DoubleCell"/>
</config>
<entry key="cell_class" type="xstring" value="org.knime.core.data.collection.ListCell"/>
<entry key="is_null" type="xboolean" value="false"/>
</config>
<entry key="ConverterFactory" type="xstring" value="org.knime.core.data.convert.datacell.ArrayToCollectionConverterFactory(org.knime.core.data.def.DoubleCell$DoubleCellFactory.create(class java.lang.Double))"/>
<entry key="replaceExisting" type="xboolean" value="false"/>
</config>
<config key="5">
<entry key="Name" type="xstring" value="debug_sum_bins"/>
<entry key="JavaName" type="xstring" value="out_debug_sum_bins"/>
<entry key="JavaType" type="xstring" value="java.lang.Integer"/>
<config key="Type">
<entry key="cell_class" type="xstring" value="org.knime.core.data.def.IntCell"/>
<entry key="is_null" type="xboolean" value="false"/>
</config>
<entry key="ConverterFactory" type="xstring" value="org.knime.core.data.def.IntCell$IntCellFactory.create(class java.lang.Integer)"/>
<entry key="replaceExisting" type="xboolean" value="false"/>
</config>
<config key="6">
<entry key="Name" type="xstring" value="bins_norm"/>
<entry key="JavaName" type="xstring" value="out_bins_norm"/>
<entry key="JavaType" type="xstring" value="[Ljava.lang.Double;"/>
<config key="Type">
<config key="collection_element_type">
<entry key="cell_class" type="xstring" value="org.knime.core.data.def.DoubleCell"/>
</config>
<entry key="cell_class" type="xstring" value="org.knime.core.data.collection.ListCell"/>
<entry key="is_null" type="xboolean" value="false"/>
</config>
<entry key="ConverterFactory" type="xstring" value="org.knime.core.data.convert.datacell.ArrayToCollectionConverterFactory(org.knime.core.data.def.DoubleCell$DoubleCellFactory.create(class java.lang.Double))"/>
<entry key="replaceExisting" type="xboolean" value="false"/>
</config>
</config>
<config key="outVars">
<entry key="array-size" type="xint" value="0"/>
</config>
<config key="inCols">
<entry key="array-size" type="xint" value="2"/>
<config key="0">
<entry key="Name" type="xstring" value="times"/>
<entry key="JavaName" type="xstring" value="c_times"/>
<entry key="JavaType" type="xstring" value="java.lang.String"/>
<config key="Type">
<config key="collection_element_type">
<entry key="cell_class" type="xstring" value="org.knime.core.data.def.LongCell"/>
</config>
<entry key="cell_class" type="xstring" value="org.knime.core.data.collection.ListCell"/>
<entry key="is_null" type="xboolean" value="false"/>
</config>
<entry key="ConverterFactory" type="xstring" value="org.knime.core.data.convert.java.SimpleDataCellToJavaConverterFactory(DataValue,class java.lang.String,String (toString()))"/>
</config>
<config key="1">
<entry key="Name" type="xstring" value="Last*(size)"/>
<entry key="JavaName" type="xstring" value="c_Lastsize"/>
<entry key="JavaType" type="xstring" value="java.lang.Integer"/>
<config key="Type">
<entry key="cell_class" type="xstring" value="org.knime.core.data.def.IntCell"/>
<entry key="is_null" type="xboolean" value="false"/>
</config>
<entry key="ConverterFactory" type="xstring" value="org.knime.core.data.convert.java.SimpleDataCellToJavaConverterFactory(IntValue,class java.lang.Integer,Integer)"/>
</config>
</config>
<config key="inVars">
<entry key="array-size" type="xint" value="0"/>
</config>
<entry key="version" type="xstring" value="version 1.x"/>
<entry key="templateUUID" type="xstring" isnull="true" value=""/>
<entry key="runOnExecute" type="xboolean" value="false"/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="timestamp %%00013%%00010calculate signal"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="47"/>
<entry key="y-coordinate" type="xint" value="279"/>
<entry key="width" type="xint" value="106"/>
<entry key="height" type="xint" value="30"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="2"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="9"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="IDLE"/>
<entry key="factory" type="xstring" value="org.knime.base.node.jsnippet.JavaSnippetNodeFactory"/>
<entry key="node-name" type="xstring" value="Java Snippet"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Java Snippet Nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.jsnippets"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME GmbH, Konstanz, Germany"/>
<entry key="node-bundle-version" type="xstring" value="3.4.0.v201706141136"/>
<entry key="node-feature-name" type="xstring" value="KNIME Core"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.base.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME GmbH, Konstanz, Germany"/>
<entry key="node-feature-version" type="xstring" value="3.4.0.v201707101013"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Java Snippet"/>
<entry key="hasContent" type="xboolean" value="false"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_dir_location" type="xstring" isnull="true" value=""/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" isnull="true" value=""/>
</config>
</config>
